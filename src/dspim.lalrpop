use std::str::FromStr;
use crate::base_type::{PIMBaseType, PIMType, PIMField, NamedBlock, Node, Edge, GeneralBlock, Walker, NodeInst, transform_node_inst, EdgeInst, Graph, WalkerInst};

grammar;

pub PIMBaseTypeRule: PIMBaseType = {
  "int8" => PIMBaseType::Int8,
  "int16" => PIMBaseType::Int16,
  "int32" => PIMBaseType::Int32,
  "int64" => PIMBaseType::Int64,
  "float" => PIMBaseType::Float,
  "double" => PIMBaseType::Double,
  "char" => PIMBaseType::Char,
};

pub PIMTypeRule: PIMType  = {
  <b: PIMBaseTypeRule> => PIMType::Basic(b),
  <b: PIMBaseTypeRule> "[" <n:Num> "]" => PIMType::Array(b, n)
};

pub TokenRule: String = <s:r"[a-zA-Z][a-zA-Z0-9\_]*"> => s.to_string();

pub FieldRule: PIMField = <name: TokenRule> ":" <t: PIMTypeRule> => PIMField{varname:name, pim_type:t};

pub FieldListRule: Vec<PIMField> = {
  <f: FieldRule> ";" => Vec::from([f]),
  <l: FieldListRule> <f: FieldRule> ";" => {
    let mut _l = l.clone();
    _l.append(&mut vec! [f]);
    _l
  }
};

pub BlockRule: Vec<PIMField> = {
  "{" <l: FieldListRule> "};" => l,
  "{" "};" => Vec::from([]),
}

pub NamedBlockRule: NamedBlock = {
  <name: TokenRule> <b: BlockRule> => NamedBlock{name: name, fields: b}
}

pub NodeRule: Node = {
  "node" <block: NamedBlockRule> => Node(block)
}

pub EdgeRule: Edge = {
  "edge" <from: TokenRule> <to: TokenRule> <block: NamedBlockRule> => {
    Edge {from: from, to: to, named_block: block}
  }
}

pub WalkerRule: Walker = {
  "walker" <node_type: TokenRule> <name: TokenRule> ";"=> {
    Walker {name: name, node_type: node_type}
  }
}

pub TokenListRule: Vec<String> = {
  <t: TokenRule> => Vec::from([t]),
  <l: TokenListRule> "," <t: TokenRule> => {
    let mut _l = l.clone();
    _l.append(&mut vec! [t]);
    _l
  }
}

pub NodeInstRule: Vec<NodeInst> = {
  "node" <node_type: TokenRule> <l: TokenListRule> ";" => {
    transform_node_inst(&node_type, &l)
  }
}

pub EdgeInstRule: EdgeInst = {
  "edge" <edge_type: TokenRule> <from_varname: TokenRule> <to_varname: TokenRule> <weight: Num> ";" => {
    EdgeInst {
      edge_type,
      from_varname,
      to_varname,
      weight,
    }
  }
}

pub WalkerInstRule: WalkerInst = {
  "walker" <walker_type: TokenRule> "on" <start_node: TokenRule> ";" => {
    WalkerInst {
      walker_type: walker_type,
      start_node: start_node,
    }
  }
}

pub GraphInstrListRule: Graph = {
  <node_list: NodeInstRule> => {
    Graph {
      node_insts: node_list,
      edge_insts: Vec::from([]),
      walker_insts: Vec::from([])
    }
  },
  <edge: EdgeInstRule> => {
    Graph {
      node_insts: Vec::from([]),
      edge_insts: vec! [edge],
      walker_insts: Vec::from([])
    }
  },
  <walker: WalkerInstRule> => {
    Graph {
      node_insts: Vec::from([]),
      edge_insts: Vec::from([]),
      walker_insts: Vec::from([walker])
    }
  },

  <g: GraphInstrListRule> <node_list: NodeInstRule> => {
    let mut _g = g.clone();
    let mut _node_list = node_list.clone();
    _g.node_insts.append(&mut _node_list);
    _g
  },
  <g: GraphInstrListRule> <edge: EdgeInstRule> => {
    let mut _g = g.clone();
    _g.edge_insts.append(&mut vec! [edge]);
    _g
  },
  <g: GraphInstrListRule> <walker: WalkerInstRule> => {
    let mut _g = g.clone();
    _g.walker_insts.append(&mut vec! [walker]);
    _g
  }

}

pub GraphRule: Graph = {
  "graph" "{" <l: GraphInstrListRule> "};" => l,
  "graph" "{"  "};" => {
    Graph{node_insts: Vec::from([]), edge_insts: Vec::from([]), walker_insts: Vec::from([])}
  }
}

pub GeneralBlockRule: GeneralBlock = {
  <node: NodeRule> => GeneralBlock::NodeBlock(node),
  <edge: EdgeRule> => GeneralBlock::EdgeBlock(edge),
  <walker: WalkerRule> => GeneralBlock::WalkerBlock(walker),
  <graph: GraphRule> => GeneralBlock::GraphBlock(graph),
}

pub GeneralRule: Vec<GeneralBlock> = {
  <general_block: GeneralBlockRule> => Vec::from([general_block]),
  <l: GeneralRule> <general_block: GeneralBlockRule> => {
    let mut _l = l.clone();
    _l.append(&mut vec![general_block]);
    _l
  }
}

Num: i64 = {
  <s:r"[0-9]+"> => i64::from_str(s).unwrap(),
  "-" <s:r"[0-9]+"> => 0 - i64::from_str(s).unwrap(),
};


pub Term: i64 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

