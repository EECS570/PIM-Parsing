use std::str::FromStr;
use crate::base_type_pim::{PIMBaseType, PIMType, PIMField};

grammar;

pub PIMBaseTypeRule: PIMBaseType = {
  "int8" => PIMBaseType::Int8,
  "int16" => PIMBaseType::Int16,
  "int32" => PIMBaseType::Int32,
  "int64" => PIMBaseType::Int64,
  "float" => PIMBaseType::Float,
  "double" => PIMBaseType::Double,
  "char" => PIMBaseType::Char,
};

pub PIMTypeRule: PIMType  = {
  <b: PIMBaseTypeRule> => PIMType::Basic(b),
  <b: PIMBaseTypeRule> "[" <n:Num> "]" => PIMType::Array(b, n)
};

pub TokenRule: &'input str = <s:r"[a-zA-Z][a-zA-Z0-9\_]*"> => s;

pub FieldRule: PIMField<'input> = <name: TokenRule> ":" <t: PIMTypeRule> => PIMField{varname:name, pim_type:t};

Num: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();


pub Term: i32 = {
    <n:Num> => n,
    "(" <t:Term> ")" => t,
};

